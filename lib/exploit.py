#coding:utf-8
#Author:se55i0n
import requests
import pymysql
import socket
import cx_Oracle
import psycopg2
import pymongo
import binascii
import os
from config import *


class check(object):
    def mysql(self, ip):
        for pwd in passwd:
            try:
                pwd = pwd.replace('{user}', 'root')
                conn = pymysql.connect(ip, 'root', pwd, 'mysql', connect_timeout=timeout)
                print(u'{}[+] {}:3306\tMysql存在弱口令: root  {}{}'.format(G, ip, pwd, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t3306\tMysql存在弱口令\troot:{}\n'.format(ip, pwd))
                conn.close()
                break
            except Exception as e:
                pass


    #author:hos@YSRC
    def mssql(self, ip):
        for pwd in passwd:
            try:
                socket.setdefaulttimeout(timeout)
                pwd = pwd.replace('{user}', 'sa')
                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                s.connect((ip, 1433))
                husername = binascii.b2a_hex('sa')
                lusername = len('sa')
                lpassword = len(pwd)
                hpwd = binascii.b2a_hex(pwd)
                address = binascii.b2a_hex(ip) +'3a'+ binascii.b2a_hex(str(1433))
                data1 = data.replace(data[16:16+len(address)], address)
                data2 = data1.replace(data1[78:78+len(husername)], husername)
                data3 = data2.replace(data2[140:140+len(hpwd)], hpwd)
                if lusername >= 16:
                    data4 = data3.replace('0X', str(hex(lusername)).replace('0x', ''))
                else:
                    data4 = data3.replace('X', str(hex(lusername)).replace('0x', ''))
                if lpassword >= 16:
                    data5 = data4.replace('0Y', str(hex(lpassword)).replace('0x', ''))
                else:
                    data5 = data4.replace('Y', str(hex(lpassword)).replace('0x', ''))
                hladd = hex(len(ip) + len(str(1433))+1).replace('0x', '')
                data6 = data5.replace('ZZ', str(hladd))
                data7 = binascii.a2b_hex(data6)
                s.send(data7)
                if 'master' in s.recv(1024):
                    with open('weakpass.txt', 'a+') as f:
                        f.write('{}\t1433\tSQLserver存在弱口令\tsa:{}\n'.format(ip, pwd))
                    print(u'{}[+] {}:1433\tSQLserver存在弱口令: sa  {}{}'.format(G, ip, pwd, W))
                    break
            except Exception as e:
                pass
            finally:
                s.close()

    def oracle(self, ip):
        for i in range(1, len(oracle_user)):
            try:
                user = oracle_user[i]
                pwd  = oracle_pass_default[i]
                conn = cx_Oracle.connect(user, pwd, ip+':1521/orcl')
                print(u'{}[+] {}:1521\tOracle存在弱口令: {} {}{}'.format(G, ip, user, pwd, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t1521\tOracle存在弱口令\t{}:{}\n'.format(ip, user, pwd))
                conn.close()
            except Exception as e:
                pass
        for pwd in passwd:
            try:
                pwd = pwd.replace('{user}', 'sys')
                conn = cx_Oracle.connect('sys', pwd, ip+':1521/orcl')
                print(u'{}[+] {}:1521\tOracle存在弱口令: sys {}{}'.format(G, ip, pwd, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t1521\tOracle存在弱口令\tsys:{}\n'.format(ip, pwd))
                conn.close()
                break
            except Exception as e:
                pass

    def postgresql(self, ip):
        for pwd in passwd:
            try:
                pwd = pwd.replace('{user}', 'postgres')
                conn = psycopg2.connect(host=ip, port=5432, user='postgres', password=pwd)
                print(u'{}[+] {}:5432\tPostgresql存在弱口令: postgres  {}{}'.format(G, ip, pwd, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t5432\tPostgresql存在弱口令\tpostgres:{}\n'.format(ip, pwd))
                conn.close()
                break
            except Exception as e:
                pass

    def redis(self, ip):
        try:
            socket.setdefaulttimeout(timeout)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip, 6379))
            s.send('INFO\r\n')
            if 'redis_version' in s.recv(1024):
                print(u'{}[+] {}:6379\tRedis存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t6379\tRedis存在未授权访问\n'.format(ip,))
            else:
                for pwd in passwd:
                    try:
                        pwd = pwd.replace('{user}', 'admin')
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s.connect((ip, 6379))
                        s.send('AUTH {}\r\n'.format(pwd))
                        if '+OK' in s.recv(1024):
                            print(u'{}[+] {}:6379\tRedis存在弱口令: {}{}'.format(G, ip, pwd, W))
                            with open('weakpass.txt', 'a+') as f:
                                f.write('{}\t6379\tRedis存在弱口令\t{}\n'.format(ip, pwd))
                            break
                    except Exception as e:
                        pass
                    finally:
                        s.close()
        except Exception as e:
            pass
        finally:
            s.close()


    # pymongo不支持2.6之前版本Mongodb，存在漏报
    # def mongodb(self, ip):
    #     try:
    #         socket.setdefaulttimeout(timeout)
    #         conn = pymongo.MongoClient(ip, 27017)
    #         dbname = conn.database_names()
    #         print(u'{}[+] {}:27017\tMongoDB存在未授权访问{}'.format(G, ip, W))
    #         with open('weakpass.txt', 'a+') as f:
    #             f.write('{}\t27017\tMongoDB存在未授权访问\n'.format(ip,))
    #     except Exception as e:
    #         pass
    #     finally:
    #         conn.close()

    def mongodb(self, ip):
        try:
            socket.setdefaulttimeout(timeout)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip, 27017))
            s.send('\x3F\x00\x00\x00\x7E\x00\x00\x00\x00\x00\x00\x00\xD4\x07\x00\x00\x04\x00\x00\x00\x61\x64\x6D\x69\x6E\x2E\x24\x63\x6D\x64\x00\x00\x00\x00\x00\xFF\xFF\xFF\xFF\x18\x00\x00\x00\x10\x6C\x69\x73\x74\x44\x61\x74\x61\x62\x61\x73\x65\x73\x00\x01\x00\x00\x00\x00')
            result = s.recv(1024)
            if 'local' in result and 'errmsg' not in result:
                print(u'{}[+] {}:27017\tMongoDB存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t27017\tMongoDB存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass
        finally:
            s.close()


    def rsync(self, ip):
        try:
            socket.setdefaulttimeout(timeout)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip, 873))
            s.sendall(b"\x40\x52\x53\x59\x4e\x43\x44\x3a\x20\x33\x31\x2e\x30\x0a")
            result = s.recv(400)
            if "RSYNCD" in result:
                s.sendall(b"\x0a")
            modulelist = s.recv(200)
            if len(modulelist) > 0:
                print(u'{}[+] {}:873\tRsync未授权访问漏洞{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t873\tRsync未授权访问漏洞\n'.format(ip,))
        except Exception as e:
            pass
        finally:
            s.close()
			
			
    def memcached(self, ip):
        try:
            socket.setdefaulttimeout(timeout)
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((ip, 11211))
            s.send('stats\r\n')
            if 'version' in s.recv(1024):
                print(u'{}[+] {}:11211\tMemcached存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t11211\tMemcached存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass
        finally:
            s.close()

    def elasticsearch(self, ip):
        try:
            url = 'http://' + ip +':9200/_cat'
            r = requests.get(url, timeout=5)
            if '/_cat/master' in r.content:
                print(u'{}[+] {}:9200\tElasticsearch存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t9200\tElasticsearch存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass


    def hadoop_namenode(self, ip):
        try:
            url = 'http://' + ip +':50070/dfshealth.html'
            r = requests.get(url, timeout=5)
            if 'Hadoop' in r.content:
                print(u'{}[+] {}:50070\tHadoop NameNode存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t50070\tHadoop NameNode存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass


    def hadoop_resourcemanager(self, ip):
        try:
            url = 'http://' + ip +':8088/cluster'
            r = requests.get(url, timeout=5)
            if 'Cluster Metrics' in r.content:
                print(u'{}[+] {}:8088\tHadoop YARN ResourceManager存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t8088\tHadoop YARN ResourceManager存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass

    # 该方法检测存在误报
    # def zookeeper(self, ip):
    #     try:
    #         socket.setdefaulttimeout(timeout)
    #         s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #         s.connect((ip, 2181))
    #         s.send('envi')
    #         if 'Environmen' in s.recv(1024):
    #             print(u'{}[+] {}:2181\tZooKeeper存在未授权访问{}'.format(G, ip, W))
    #             with open('weakpass.txt', 'a+') as f:
    #                 f.write('{}\t2181\tZooKeeper存在未授权访问\n'.format(ip,))
    #     except Exception as e:
    #         pass
    #     finally:
    #         s.close()

    def zookeeper(self, ip):
        try:
            # Linux
            zk_cmd = '/usr/share/zookeeper/bin/zkCli.sh -server ' + ip + ' ls /'
            # Windows
            # zk_cmd = '"D:\\Program Files\\zookeeper-3.4.14\\bin\\zkCli.cmd" -server ' + ip + ' ls /'
            zk_check = os.popen(zk_cmd)

            if '[zookeeper]' in zk_check.read():
                print(u'{}[+] {}:2181\tZooKeeper存在未授权访问{}'.format(G, ip, W))
                with open('weakpass.txt', 'a+') as f:
                    f.write('{}\t2181\tZooKeeper存在未授权访问\n'.format(ip,))
        except Exception as e:
            pass
        finally:
            s.close()